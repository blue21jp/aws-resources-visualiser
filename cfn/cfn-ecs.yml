AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Resource Visualizer - Fargate'

Parameters:
  ContainerImage:
    Type: String
  TaskCpu:
    Type: String
  TaskMemory:
    Type: String
  TaskDesiredCount:
    Type: String

Mappings:
  !Rain::Include ../rainlib/rain_inc_map_vpc_id.yml

Resources:

  # Security Group
  FargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref "AWS::StackName"
      GroupDescription: Security group for Fargate tasks
      VpcId: !FindInMap [AccountToVpcIdParams, !Ref "AWS::AccountId", VpcId]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8501
          ToPort: 8501
          SourcePrefixListId: !FindInMap [AccountToVpcIdParams, !Ref "AWS::AccountId", PrefixListSafePublicId]
          Description: Allow HTTP traffic from safe public prefix list
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: !Ref "AWS::StackName"

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref "AWS::StackName"
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Ref "AWS::StackName"

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${AWS::StackName}"
      RetentionInDays: 7

  # ECS Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-execution-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-execution-role"

  # ECS Task Role
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-task-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}Policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeTags
                  - rds:DescribeDBInstances
                  - rds:ListTagsForResource
                  - s3:ListAllMyBuckets
                  - s3:GetBucketLocation
                  - s3:GetBucketAcl
                  - s3:GetBucketTagging
                  - lambda:ListFunctions
                  - lambda:ListTags
                Resource: '*'
        - PolicyName: !Sub "${AWS::StackName}ECSExecPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-task-role"

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref "AWS::StackName"
      Cpu: !Ref TaskCpu
      Memory: !Ref TaskMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: app
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ContainerImage}"
          PortMappings:
            - ContainerPort: 8501
              Protocol: tcp
          Environment:
            - Name: BATCH_RUN_TYPE
              Value: ecs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - "curl -f http://localhost:8501/_stcore/health || exit 1"
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
      Tags:
        - Key: Name
          Value: !Ref "AWS::StackName"

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref "AWS::StackName"
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: !Ref TaskDesiredCount
      EnableExecuteCommand: true
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref FargateSecurityGroup
          Subnets:
            - !FindInMap [AccountToVpcIdParams, !Ref "AWS::AccountId", PublicSubnetId1]
            - !FindInMap [AccountToVpcIdParams, !Ref "AWS::AccountId", PublicSubnetId2]
      Tags:
        - Key: Name
          Value: !Ref "AWS::StackName"
